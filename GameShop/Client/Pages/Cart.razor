@page "/cart"
@using GameShop.Shared.DTO
@inject ICartService CartService

<PageTitle>Indkøbskurv</PageTitle>

@if (cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else
{
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5>
                        <a href="/product/@product.ProductId">@product.Title</a>
                    </h5>
                    <span>@product.ProductType</span>
                    <input type="number" value="@product.Quantity"
                           @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))"
                           class="form-control input-quanity"
                           min="1" />
                    <button class="btn-delete" @onclick="@(() => RemoveProductFromCart(product.ProductId, product.ProductTypeId))">Delete</button>
                </div>
                <div class="cart-product-price">
                    $@(product.Price * product.Quantity)
                </div>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count): $@cartProducts.Sum(Product => Product.Price * Product.Quantity)
        </div>
    </div>
}

@code {
    List<CartProductResponse> cartProducts = null;
    string message = "Indlæser kurv...";
    
    
    // Denne metode kaldes, når komponenten initialiseres.
    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }
        
    private async Task RemoveProductFromCart(Guid productId, Guid productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }
    
    private async Task LoadCart()
    {
        if ((await CartService.GetCartItems()).Count == 0)
        {
            message = "Kurven er tom";
            cartProducts = new List<CartProductResponse>();
        }
        else
        {
            cartProducts = await CartService.GetCartProducts();
        }
    }
        
    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse cartProduct)
    {
        cartProduct.Quantity = int.Parse(e.Value.ToString());
        if (cartProduct.Quantity < 1)
        {
            cartProduct.Quantity = 1;
        }
        await CartService.UpdateQuantity(cartProduct);
    }
}